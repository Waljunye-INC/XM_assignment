// Code generated by MockGen. DO NOT EDIT.
// Source: apartments.go
//
// Generated by this command:
//
//	mockgen -source=apartments.go -destination=mocks/mock_apartments_repository.go
//

// Package mock_apartments is a generated GoMock package.
package mock_apartments

import (
	domain "OMS_assignment/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockapartmentsRepository is a mock of apartmentsRepository interface.
type MockapartmentsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockapartmentsRepositoryMockRecorder
	isgomock struct{}
}

// MockapartmentsRepositoryMockRecorder is the mock recorder for MockapartmentsRepository.
type MockapartmentsRepositoryMockRecorder struct {
	mock *MockapartmentsRepository
}

// NewMockapartmentsRepository creates a new mock instance.
func NewMockapartmentsRepository(ctrl *gomock.Controller) *MockapartmentsRepository {
	mock := &MockapartmentsRepository{ctrl: ctrl}
	mock.recorder = &MockapartmentsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockapartmentsRepository) EXPECT() *MockapartmentsRepositoryMockRecorder {
	return m.recorder
}

// DeleteApartment mocks base method.
func (m *MockapartmentsRepository) DeleteApartment(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApartment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApartment indicates an expected call of DeleteApartment.
func (mr *MockapartmentsRepositoryMockRecorder) DeleteApartment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApartment", reflect.TypeOf((*MockapartmentsRepository)(nil).DeleteApartment), ctx, id)
}

// GetApartmentByID mocks base method.
func (m *MockapartmentsRepository) GetApartmentByID(ctx context.Context, id int64) (domain.Apartment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApartmentByID", ctx, id)
	ret0, _ := ret[0].(domain.Apartment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApartmentByID indicates an expected call of GetApartmentByID.
func (mr *MockapartmentsRepositoryMockRecorder) GetApartmentByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApartmentByID", reflect.TypeOf((*MockapartmentsRepository)(nil).GetApartmentByID), ctx, id)
}

// GetApartments mocks base method.
func (m *MockapartmentsRepository) GetApartments(ctx context.Context) ([]domain.Apartment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApartments", ctx)
	ret0, _ := ret[0].([]domain.Apartment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApartments indicates an expected call of GetApartments.
func (mr *MockapartmentsRepositoryMockRecorder) GetApartments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApartments", reflect.TypeOf((*MockapartmentsRepository)(nil).GetApartments), ctx)
}

// GetApartmentsByBuildingID mocks base method.
func (m *MockapartmentsRepository) GetApartmentsByBuildingID(ctx context.Context, buildingID int64) ([]domain.Apartment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApartmentsByBuildingID", ctx, buildingID)
	ret0, _ := ret[0].([]domain.Apartment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApartmentsByBuildingID indicates an expected call of GetApartmentsByBuildingID.
func (mr *MockapartmentsRepositoryMockRecorder) GetApartmentsByBuildingID(ctx, buildingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApartmentsByBuildingID", reflect.TypeOf((*MockapartmentsRepository)(nil).GetApartmentsByBuildingID), ctx, buildingID)
}

// SetApartment mocks base method.
func (m *MockapartmentsRepository) SetApartment(ctx context.Context, apartment domain.Apartment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApartment", ctx, apartment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApartment indicates an expected call of SetApartment.
func (mr *MockapartmentsRepositoryMockRecorder) SetApartment(ctx, apartment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApartment", reflect.TypeOf((*MockapartmentsRepository)(nil).SetApartment), ctx, apartment)
}
