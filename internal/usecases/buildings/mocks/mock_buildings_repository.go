// Code generated by MockGen. DO NOT EDIT.
// Source: buildings.go
//
// Generated by this command:
//
//	mockgen -source=buildings.go -destination=mocks/mock_buildings_repository.go
//

// Package mock_buildings is a generated GoMock package.
package mock_buildings

import (
	domain "OMS_assignment/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockbuildingsRepository is a mock of buildingsRepository interface.
type MockbuildingsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockbuildingsRepositoryMockRecorder
	isgomock struct{}
}

// MockbuildingsRepositoryMockRecorder is the mock recorder for MockbuildingsRepository.
type MockbuildingsRepositoryMockRecorder struct {
	mock *MockbuildingsRepository
}

// NewMockbuildingsRepository creates a new mock instance.
func NewMockbuildingsRepository(ctrl *gomock.Controller) *MockbuildingsRepository {
	mock := &MockbuildingsRepository{ctrl: ctrl}
	mock.recorder = &MockbuildingsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbuildingsRepository) EXPECT() *MockbuildingsRepositoryMockRecorder {
	return m.recorder
}

// DeleteBuilding mocks base method.
func (m *MockbuildingsRepository) DeleteBuilding(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuilding", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBuilding indicates an expected call of DeleteBuilding.
func (mr *MockbuildingsRepositoryMockRecorder) DeleteBuilding(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuilding", reflect.TypeOf((*MockbuildingsRepository)(nil).DeleteBuilding), ctx, id)
}

// GetBuildingByID mocks base method.
func (m *MockbuildingsRepository) GetBuildingByID(ctx context.Context, id int64) (domain.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildingByID", ctx, id)
	ret0, _ := ret[0].(domain.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildingByID indicates an expected call of GetBuildingByID.
func (mr *MockbuildingsRepositoryMockRecorder) GetBuildingByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildingByID", reflect.TypeOf((*MockbuildingsRepository)(nil).GetBuildingByID), ctx, id)
}

// GetBuildings mocks base method.
func (m *MockbuildingsRepository) GetBuildings(ctx context.Context) ([]domain.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildings", ctx)
	ret0, _ := ret[0].([]domain.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildings indicates an expected call of GetBuildings.
func (mr *MockbuildingsRepositoryMockRecorder) GetBuildings(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildings", reflect.TypeOf((*MockbuildingsRepository)(nil).GetBuildings), ctx)
}

// SetBuilding mocks base method.
func (m *MockbuildingsRepository) SetBuilding(ctx context.Context, building domain.Building) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBuilding", ctx, building)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBuilding indicates an expected call of SetBuilding.
func (mr *MockbuildingsRepositoryMockRecorder) SetBuilding(ctx, building any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBuilding", reflect.TypeOf((*MockbuildingsRepository)(nil).SetBuilding), ctx, building)
}
